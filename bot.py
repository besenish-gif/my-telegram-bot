import telebot
from telebot import types
import os
import time
import requests
from flask import Flask
import threading

# Flask app –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–æ–≤
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running!"

# –ó–∞–ø—É—Å–∫–∞–µ–º Flask –°–†–ê–ó–£
def run_flask():
    app.run(host='0.0.0.0', port=8000, debug=False, use_reloader=False)

flask_thread = threading.Thread(target=run_flask, daemon=True)
flask_thread.start()

TOKEN = os.environ.get('BOT_TOKEN') or '8478425052:AAEWtD19dGdCsGMnV2M9TJzzlAX_gl2txBs'
bot = telebot.TeleBot(TOKEN)

# ID –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID)
MANAGER_IDS = [500016247, 832104985]  # –£–∑–Ω–∞–π ID —á–µ—Ä–µ–∑ @userinfobot

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤—Å–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
def send_order_to_managers(order_data):
    # –†–∞—Å—á–µ—Ç –≤—ã–≥–æ–¥—ã
    full_prices = {
        'california_viscose': 770,
        'len_crash': 710,
        'jersey': 1150,
        'euro_angora': 900,
        'lapsha': 790
    }
    
    fabric_type = order_data['fabric_type']
    full_price = full_prices.get(fabric_type, 0)
    discount_price = order_data.get('price_per_meter', 0)
    saved_amount = (full_price - discount_price) * order_data['quantity']
    
    order_text = (
        f"üÜï **–ù–û–í–´–ô –ó–ê–ö–ê–ó!**\n\n"
        f"üßµ **–¢–∏–ø —Ç–∫–∞–Ω–∏:** {order_data['fabric_name']}\n"
        f"üé® **–¶–≤–µ—Ç:** {order_data['color']}\n"
        f"üìè **–ú–µ—Ç—Ä–∞–∂:** {order_data['quantity']} –º\n"
        f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∫–∞–Ω–∏:** {order_data.get('total_price', 0)} —Ä—É–±\n"
        f"üí∞ **–í—ã–≥–æ–¥–∞:** {saved_amount} —Ä—É–±\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ç–∫–∞—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
    if order_data.get('threads_count', 0) > 0:
        order_text += f"üßµ **–ù–∏—Ç–∫–∏ –≤ —Ç–æ–Ω:** {order_data['threads_count']} —à—Ç (+{order_data.get('threads_price', 0)} —Ä—É–±)\n"
    
    order_text += (
        f"üë§ **–§–ò–û:** {order_data['fio']}\n"
        f"üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {order_data['phone']}\n"
        f"üìç **–ü–í–ó –°–î–≠–ö:** {order_data['address']}\n"
        f"üë§ **ID –∫–ª–∏–µ–Ω—Ç–∞:** {order_data.get('user_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        f"üöö **–î–æ—Å—Ç–∞–≤–∫–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ**"
    )

    # –ü—Ä–æ—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
    markup = types.InlineKeyboardMarkup()
    btn_contact = types.InlineKeyboardButton(
        'üìû –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É',
        url=f"tg://user?id={order_data.get('user_id')}"
    )
    markup.add(btn_contact)

    success_count = 0
    for manager_id in MANAGER_IDS:
        try:
            bot.send_message(
                manager_id,
                order_text,
                reply_markup=markup,
                parse_mode='Markdown'
            )
            success_count += 1
            print(f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_id}: {e}")

    return success_count > 0  # True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å

# –°—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç—ã –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ (–ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
POST_LINKS = {
    'california_viscose': 'https://t.me/ya_shveyaa/566',
    'len_crash': 'https://t.me/ya_shveyaa/771',
    'jersey': 'https://t.me/ya_shveyaa/572',
    'euro_angora': 'https://t.me/ya_shveyaa/946',
    'lapsha': 'https://t.me/ya_shveyaa/575'
}

@bot.message_handler(commands=['start'])
def start_command(message):
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(
        text='üéØ –û—Ç—Ä–µ–∑—ã —Ç–∫–∞–Ω–µ–π',
        callback_data='show_fabric_types'
    )
    markup.add(btn)

    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∫–∞–Ω–µ–π! üßµ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç—Ä–µ–∑—ã —Ç–∫–∞–Ω–µ–π"
@bot.callback_query_handler(func=lambda call: call.data == 'show_fabric_types')
def show_fabric_types(call):
    # –ú–µ–Ω—é —Å —Ç–∏–ø–∞–º–∏ —Ç–∫–∞–Ω–µ–π
    markup = types.InlineKeyboardMarkup(row_width=1)

    btn1 = types.InlineKeyboardButton('üßµ –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏–π—Å–∫–∞—è –≤–∏—Å–∫–æ–∑–∞', callback_data='fabric_california_viscose')
    btn2 = types.InlineKeyboardButton('üåø –õ–µ–Ω-–∫—Ä—ç—à', callback_data='fabric_len_crash')
    btn3 = types.InlineKeyboardButton('üëï –î–∂–µ—Ä—Å–∏', callback_data='fabric_jersey')
    btn4 = types.InlineKeyboardButton('üê∞ –ï–≤—Ä–æ–∞–Ω–≥–æ—Ä–∞', callback_data='fabric_euro_angora')
    btn5 = types.InlineKeyboardButton('üçú –õ–∞–ø—à–∞', callback_data='fabric_lapsha')
    btn_back = types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main')

    markup.add(btn1, btn2, btn3, btn4, btn5, btn_back)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–∫–∞–Ω–∏:",
        reply_markup=markup
    )

# –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∫–∞–Ω–∏ - —Å –∫–Ω–æ–ø–∫–æ–π –ó–ê–ö–ê–ó–ê–¢–¨
@bot.callback_query_handler(func=lambda call: call.data.startswith('fabric_'))
def send_fabric_post(call):
    fabric_type = call.data.replace('fabric_', '')

    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç
    post_link = POST_LINKS.get(fabric_type, 'https://t.me/–≤–∞—à_–∫–∞–Ω–∞–ª')

    # –¢–µ–∫—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∫–∞–Ω–∏
    fabric_names = {
        'california_viscose': '–ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏–π—Å–∫–∞—è –≤–∏—Å–∫–æ–∑–∞',
        'len_crash': '–õ–µ–Ω-–∫—Ä—ç—à',
        'jersey': '–î–∂–µ—Ä—Å–∏',
        'euro_angora': '–ï–≤—Ä–æ–∞–Ω–≥–æ—Ä–∞',
        'lapsha': '–õ–∞–ø—à–∞'
    }

    # –¶–µ–Ω—ã (–Ω–æ–≤–∞—è —Ü–µ–Ω–∞)
    prices = {
        'california_viscose': 616,
        'len_crash': 604,
        'jersey': 978,
        'euro_angora': 720,
        'lapsha': 632
    }

    fabric_name = fabric_names.get(fabric_type, '—Ç–∫–∞–Ω–∏')
    current_price = prices.get(fabric_type, 0)

    # –°–û–ó–î–ê–ï–ú –ö–ù–û–ü–ö–£ "–ó–ê–ö–ê–ó–ê–¢–¨"
    markup = types.InlineKeyboardMarkup()
    btn_post = types.InlineKeyboardButton('üìñ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É', url=post_link)
    btn_order = types.InlineKeyboardButton('üõí –ó–∞–∫–∞–∑–∞—Ç—å', callback_data=f'order_{fabric_type}')  # –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
    btn_back = types.InlineKeyboardButton('‚óÄÔ∏è –ö –≤—ã–±–æ—Ä—É —Ç–∫–∞–Ω–µ–π', callback_data='show_fabric_types')

    markup.add(btn_post, btn_order)  # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    markup.add(btn_back)

    price_text = (
        f"üéä {fabric_name.upper()} üéä\n\n"
        f"üí∞ –¶–µ–Ω–∞: {current_price} —Ä—É–±/–º\n\n"
        f"‚ú® –û—Ç—Ä–µ–∑—ã –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É!\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—Ä–µ–∑—ã –≤ –∫–∞–Ω–∞–ª–µ –∏–ª–∏ —Å—Ä–∞–∑—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑:"
    )

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=price_text,
        reply_markup=markup
    )

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
user_orders = {}

# –ù–û–í–´–ô —É–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑–∞—Ç—å"
@bot.callback_query_handler(func=lambda call: call.data.startswith('order_'))
def handle_order(call):
    fabric_type = call.data.replace('order_', '')

    # –¢–µ–∫—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∫–∞–Ω–∏
    fabric_names = {
        'california_viscose': '–ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏–π—Å–∫–∞—è –≤–∏—Å–∫–æ–∑–∞',
        'len_crash': '–õ–µ–Ω-–∫—Ä—ç—à',
        'jersey': '–î–∂–µ—Ä—Å–∏',
        'euro_angora': '–ï–≤—Ä–æ–∞–Ω–≥–æ—Ä–∞',
        'lapsha': '–õ–∞–ø—à–∞'
    }

    fabric_name = fabric_names.get(fabric_type, '—Ç–∫–∞–Ω–∏')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–∫–∞–∑–∞
    user_id = call.from_user.id
    user_orders[user_id] = {
        'fabric_type': fabric_type,
        'fabric_name': fabric_name,
        'step': 'fabric_type_confirm'  # –ü–µ—Ä–≤—ã–π —à–∞–≥ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç–∫–∞–Ω–∏
    }

    # –ó–∞–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç–∫–∞–Ω–∏
    markup = types.InlineKeyboardMarkup()
    btn_confirm = types.InlineKeyboardButton('‚úÖ –î–∞, –≤–µ—Ä–Ω–æ', callback_data='confirm_fabric')
    btn_change = types.InlineKeyboardButton('üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é', callback_data='show_fabric_types')
    markup.add(btn_confirm, btn_change)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"üõí **–û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê**\n\n"
             f"üßµ **–®–∞–≥ 1 –∏–∑ 7:** –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–∫–∞–Ω—å: **{fabric_name.upper()}**\n\n"
             f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä —Ç–∫–∞–Ω–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é:",
        reply_markup=markup,
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–∫–∞–Ω–∏
@bot.callback_query_handler(func=lambda call: call.data == 'confirm_fabric')
def confirm_fabric(call):
    user_id = call.from_user.id
    order_data = user_orders.get(user_id)

    if not order_data:
        return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ —Ü–≤–µ—Ç–µ
    order_data['step'] = 'color'

    markup = types.InlineKeyboardMarkup()
    btn_cancel = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='cancel_order')
    markup.add(btn_cancel)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"üõí **–û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê: {order_data['fabric_name'].upper()}**\n\n"
             f"üé® **–®–∞–≥ 2 –∏–∑ 7:** –ö–∞–∫–æ–π —Ü–≤–µ—Ç —Ç–∫–∞–Ω–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?\n"
             f"(–æ–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ü–≤–µ—Ç)",
        reply_markup=markup,
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.from_user.id in user_orders)
def handle_order_responses(message):
    user_id = message.from_user.id
    order_data = user_orders.get(user_id)

    if not order_data:
        return

    current_step = order_data['step']
    fabric_name = order_data['fabric_name']

    markup = types.InlineKeyboardMarkup()
    btn_cancel = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='cancel_order')
    markup.add(btn_cancel)

    if current_step == 'color':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω —Ç–µ–∫—Å—Ç, –∞ –Ω–µ —á–∏—Å–ª–æ
        if message.text.replace('.', '').replace(',', '').isdigit():
            bot.send_message(
                user_id,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Ü–≤–µ—Ç —Ç–∫–∞–Ω–∏ —Å–ª–æ–≤–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–≥–æ–ª—É–±–æ–π', '–±–µ–∂–µ–≤—ã–π', '–≤ –ø–æ–ª–æ—Å–∫—É'):",
                reply_markup=markup
            )
            return
            
        order_data['color'] = message.text
        order_data['step'] = 'quantity'

        bot.send_message(
            user_id,
            f"üìè **–®–∞–≥ 3 –∏–∑ 7:** –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –º–µ—Ç—Ä–∞–∂:\n"
            f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5 –∏–ª–∏ 3)",
            reply_markup=markup,
            parse_mode='Markdown'
        )

    elif current_step == 'quantity':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ
        try:
            quantity = float(message.text.replace(',', '.'))
            if quantity <= 0:
                raise ValueError

            order_data['quantity'] = quantity
            order_data['step'] = 'threads'

            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –Ω–∏—Ç–∫–∏
            markup_threads = types.InlineKeyboardMarkup()
            btn_yes_threads = types.InlineKeyboardButton('‚úÖ –î–∞', callback_data='threads_yes')
            btn_no_threads = types.InlineKeyboardButton('‚ùå –ù–µ—Ç', callback_data='threads_no')
            markup_threads.add(btn_yes_threads, btn_no_threads)
            markup_threads.add(btn_cancel)

            bot.send_message(
                user_id,
                f"üßµ **–®–∞–≥ 4 –∏–∑ 7:** –ù—É–∂–Ω—ã –ª–∏ –Ω–∏—Ç–∫–∏ –≤ —Ç–æ–Ω? (50 —Ä—É–±/–∫–∞—Ç.)",
                reply_markup=markup_threads,
                parse_mode='Markdown'
            )

        except ValueError:
            bot.send_message(
                user_id,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5 –∏–ª–∏ 3):",
                reply_markup=markup
            )

    elif current_step == 'fio':
        order_data['fio'] = message.text
        order_data['step'] = 'phone'

        bot.send_message(
            user_id,
            f"üì± **–®–∞–≥ 6 –∏–∑ 7:** –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:",
            reply_markup=markup,
            parse_mode='Markdown'
        )

    elif current_step == 'phone':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –µ—Å—Ç—å —Ü–∏—Ñ—Ä—ã
        phone_digits = ''.join(filter(str.isdigit, message.text))
        if len(phone_digits) < 10:
            bot.send_message(
                user_id,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä):",
                reply_markup=markup
            )
            return

        order_data['phone'] = message.text
        order_data['step'] = 'address'

        bot.send_message(
            user_id,
            f"üìç **–®–∞–≥ 7 –∏–∑ 7:** –ê–¥—Ä–µ—Å —É–¥–æ–±–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ –°–î–≠–ö:\n"
            f"(–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞)",
            reply_markup=markup,
            parse_mode='Markdown'
        )

    elif current_step == 'address':
        order_data['address'] = message.text
        order_data['step'] = 'complete'

        # –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥
        show_order_summary(user_id, order_data)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∏—Ç–æ–∫
@bot.callback_query_handler(func=lambda call: call.data in ['threads_yes', 'threads_no'])
def handle_threads(call):
    user_id = call.from_user.id
    order_data = user_orders.get(user_id)

    if not order_data:
        return

    if call.data == 'threads_yes':
        order_data['step'] = 'threads_count'
        
        markup = types.InlineKeyboardMarkup()
        btn_cancel = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='cancel_order')
        markup.add(btn_cancel)

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üßµ **–®–∞–≥ 5 –∏–∑ 7:** –°–∫–æ–ª—å–∫–æ –∫–∞—Ç—É—à–µ–∫ –Ω–∏—Ç–æ–∫ –Ω—É–∂–Ω–æ?\n"
                 f"(—Ü–µ–Ω–∞: 50 —Ä—É–±/–∫–∞—Ç.)",
            reply_markup=markup,
            parse_mode='Markdown'
        )
    else:
        order_data['threads_count'] = 0
        order_data['threads_price'] = 0
        order_data['step'] = 'fio'
        
        markup = types.InlineKeyboardMarkup()
        btn_cancel = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='cancel_order')
        markup.add(btn_cancel)

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üë§ **–®–∞–≥ 6 –∏–∑ 7:** –í–∞—à–µ –§–ò–û (–ø–æ–ª–Ω–æ—Å—Ç—å—é):",
            reply_markup=markup,
            parse_mode='Markdown'
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∏—Ç–æ–∫
@bot.message_handler(func=lambda message: message.from_user.id in user_orders and user_orders.get(message.from_user.id, {}).get('step') == 'threads_count')
def handle_threads_count(message):
    user_id = message.from_user.id
    order_data = user_orders.get(user_id)

    if not order_data:
        return

    try:
        threads_count = int(message.text)
        if threads_count < 0:
            raise ValueError

        order_data['threads_count'] = threads_count
        order_data['threads_price'] = threads_count * 50
        order_data['step'] = 'fio'
        
        markup = types.InlineKeyboardMarkup()
        btn_cancel = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='cancel_order')
        markup.add(btn_cancel)

        bot.send_message(
            user_id,
            f"üë§ **–®–∞–≥ 6 –∏–∑ 7:** –í–∞—à–µ –§–ò–û (–ø–æ–ª–Ω–æ—Å—Ç—å—é):",
            reply_markup=markup,
            parse_mode='Markdown'
        )

    except ValueError:
        markup = types.InlineKeyboardMarkup()
        btn_cancel = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='cancel_order')
        markup.add(btn_cancel)

        bot.send_message(
            user_id,
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∫–∞—Ç—É—à–µ–∫:",
            reply_markup=markup
        )

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∏—Ç–æ–≥–æ–≤ –∑–∞–∫–∞–∑–∞
def show_order_summary(user_id, order_data):
    # –¶–µ–Ω—ã (–Ω–æ–≤–∞—è —Ü–µ–Ω–∞ / —Å—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞)
    prices = {
        'california_viscose': (616, 770),
        'len_crash': (604, 710),
        'jersey': (978, 1150),
        'euro_angora': (720, 900),
        'lapsha': (632, 790)
    }

    fabric_type = order_data['fabric_type']
    price_per_meter, old_price = prices.get(fabric_type, (0, 0))
    order_data['price_per_meter'] = price_per_meter
    
    total_fabric_price = price_per_meter * order_data['quantity']
    threads_price = order_data.get('threads_price', 0)
    total_price = total_fabric_price + threads_price
    
    order_data['total_price'] = total_price
    order_data['user_id'] = user_id

    # –†–∞—Å—á–µ—Ç –≤—ã–≥–æ–¥—ã
    saved_per_meter = old_price - price_per_meter
    total_saved = saved_per_meter * order_data['quantity']

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤—Å–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    send_success = send_order_to_managers(order_data)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    summary_text = (
        f"‚úÖ –ó–ê–ö–ê–ó –û–§–û–†–ú–õ–ï–ù!\n\n"
        f"üßµ **–¢–∏–ø —Ç–∫–∞–Ω–∏:** {order_data['fabric_name']}\n"
        f"üé® **–¶–≤–µ—Ç:** {order_data['color']}\n"
        f"üìè **–ú–µ—Ç—Ä–∞–∂:** {order_data['quantity']} –º\n"
        f"üí∞ **–¶–µ–Ω–∞:** {price_per_meter} —Ä—É–±/–º\n"
        f"üí∞ **–ü–æ–ª–Ω–∞—è —Ü–µ–Ω–∞:** ~~{old_price} —Ä—É–±/–º~~\n"
        f"üî• **–í–∞—à–∞ –≤—ã–≥–æ–¥–∞:** {total_saved} —Ä—É–±!\n"
        f"üíµ **–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∫–∞–Ω–∏:** {total_fabric_price} —Ä—É–±\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ç–∫–∞—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
    if order_data.get('threads_count', 0) > 0:
        summary_text += f"üßµ **–ù–∏—Ç–∫–∏ –≤ —Ç–æ–Ω:** {order_data['threads_count']} —à—Ç (+{threads_price} —Ä—É–±)\n"
    
    summary_text += (
        f"üíé **–ò–¢–û–ì–û:** {total_price} —Ä—É–±\n\n"
        f"üë§ **–§–ò–û:** {order_data['fio']}\n"
        f"üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {order_data['phone']}\n"
        f"üìç **–ü–í–ó –°–î–≠–ö:** {order_data['address']}\n\n"
        f"üöö *–î–æ—Å—Ç–∞–≤–∫–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ*\n\n"
    )

    if send_success:
        summary_text += "üìû –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!"
    else:
        summary_text += "‚ö†Ô∏è –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ @Mafia_Dubna"

    markup = types.InlineKeyboardMarkup()
    btn_manager = types.InlineKeyboardButton(
        'üìû –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É',
        url='https://t.me/Mafia_Dubna'
    )
    btn_new_order = types.InlineKeyboardButton('üõç –ù–æ–≤—ã–π –∑–∞–∫–∞–∑', callback_data='show_fabric_types')
    markup.add(btn_manager)
    markup.add(btn_new_order)

    bot.send_message(
        user_id,
        summary_text,
        reply_markup=markup,
        parse_mode='Markdown'
    )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    if user_id in user_orders:
        del user_orders[user_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
@bot.callback_query_handler(func=lambda call: call.data == 'cancel_order')
def cancel_order(call):
    user_id = call.from_user.id
    if user_id in user_orders:
        del user_orders[user_id]

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton('üõç –ù–æ–≤—ã–π –∑–∞–∫–∞–∑', callback_data='show_fabric_types')
        )
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@bot.callback_query_handler(func=lambda call: call.data == 'back_to_main')
def back_to_main(call):
    start_command(call)

print("ü™° –ë–æ—Ç –¥–ª—è —Ç–∫–∞–Ω–µ–π –∑–∞–ø—É—â–µ–Ω! –†–∞–±–æ—Ç–∞–µ—Ç –º–µ–Ω—é —Å 5 —Ç–∏–ø–∞–º–∏ —Ç–∫–∞–Ω–µ–π")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞
while True:
    try:
        print("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        bot.infinity_polling(timeout=60, long_polling_timeout=30, restart_on_change=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
        time.sleep(30)
